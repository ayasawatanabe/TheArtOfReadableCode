リーダブルコード
第五章
コメントすべきことを知る

コメントの目的は、書き手の意図を読み手に知らせること
5.1コメントすべきではないこと
価値のないコメント
// Accountクラスの定義
Class Account{
 Public;
    // コンストラクタ
　Account();
　// profitに新しい値を設定する
　void SetProfit(double profit);
   // このAccoutからprofit
   Double GetProfit();
};
新しい情報がない
理解の助けになるわけでもない
全く価値がない

コードからすぐに分かることをコメントに書かない

新しい情報を提供していなくても理解の助けになる例
# 二番目の＊以降をすべて削除する
Name = `*`.join(line.split(`*`)[;2]);

価値のないコメント
// 与えられたsubtreeに含まれるnameとdepthに合格したNoneを見つける
Node* FindNodeInSubtree(Node* subtree, string name, int depth);
改善案
// 与えられたnameに合格したNodeかNULLを返す
// もしdepth <= 0 ならばsubtree だけ調べる
// もしdepth == N ならばsubtreeとその下のN階層まで調べる
Node* FindNodeInSubtree(Node* subtree, string name, int depth);

ひどい名前はコメントを付けずに名前を変える
// ReplyにたいしてRequestで記述した制限を課す
// 例えば返ってくる項目やバイト数など
Void CleanReply(Request requests, Reply reply);
このコメントはcleanの意味を分かりやすく説明しているだけ
[制約を課す　enforce limit]という言葉を関数名に入れたほうがいい
Void EnforceLimitsFromRequest(Request request, Reply reply);
色んな所で呼び出される関数なので優れたコメントよりも優れた名前が大切

ーーー
// レジストリキーのハンドルを解放する。実際のレジストリは開放しない
Void DeleteRegistry(RegistryKey* key);
DeleteResgistry()は危険な関数のように見える(レジストリを削除する)
以下のような自己文書化した名前をつける
Void ReleaseRegistryHandle()

優れたコード　＞　ひどいコード＋優れたコメント

5.2自分の考えを記録する
映画の最後にある監督のコメンタリーをいれる

// このデータだとハッシュテーブルよりもバイナリツリーのほうが40%早かった
// 左右の比較よりもハッシュの計算コストのほうが高いようだ
// ヒューリスティックだと単語が漏れることがあるが仕方ない100%は難しい
// ヒューリスティックまたは発見的とは必ず正しい答えを導けるわけではないがある程度のレベルで正解に近い解を得ることができる手法
->バグだと勘違いしない、失敗するテストケースがあることを認識できる

・コードの欠陥にコメントを付ける
// TODOもっと高速なアルゴリズムを使う
// TODO(ダスティン)JPEG以外のフォーマットに対応する

よく使う記法
記法　　　典型的な意味
TODO　後で手を付ける
FIXME　既知の不具合があるコード
HACK　あまりキレイじゃない解決法
XXX;　　危険！大きな問題がある

・定数にコメントを付ける
その定数が何をするのか
なぜその値をもっているのか
背景をコメントに残す

NUM_THREADS = 8
// 値は[>= 2 * num_processors]で十分

Const int MAX_RSS_SUBSCRIPTIONS = 10000;
// 合理的な限界値、人間はこんなに読めない

image_quality = 0.72;
// 0.72ならユーザはファイルサイズと品質の面で妥協できる

コメントが必要ないくらいいいい定数名をつける
SECONDS_PER_DAY

5.3読み手の立場になって考える
・質問されそうなことを想像する
Void Clear() {
  Vector<float>().swap(data);
   // え？どうして単純にdata.clear()せずにからのベクタをスワップするんだ？
}

このようにしているのはベクタのメモリを解放してメモリアプリケータに戻す方法がこれしかないから
コメント例
// ベクタのメモリを解放する(STL swap技法)で検索

・ハマりそうな罠を告知する
// メールを送信する外部サービスを呼び出している(1秒でタイムアウト)
Void SendEmail();
HTTPリクエスト中に誤ってこの関数を呼び出すとハングしてしまう可能性がある

処理に時間がかかってしまう場合など事前に教えてあげる
// 実行時間は0(タグの数＊タグの深さの平均)なのでネストの深さに気をつける
def FixBrokenHtml(html)

全体像のコメント
要約コメント

# 顧客が自分で購入した商品を検索する
For customer_id in all_customers;
  For sale in all_sakes[customer_id].sales;
    If sale.recipient == customer_id;

Def GenerateUseReport();
  # このユーザのロックを獲得する
  …
  # ユーザの情報をDBから読み込む
  …
 # 情報をファイルに書き出す
…
# このユーザのロックを解放する

5.4ライターズ・ブロックを乗り越える
// やばい。これはリストに重複があったら面倒なことになる
やばい　ー＞　注意　これは気をつけて
これ　ー＞　入力を処理するコード
面倒なことになる　ー＞　実装が難しくなる
// 注意；このコードはリストの重複を処理できません（実装が難しいので）

コメントを書くステップ
・頭の中にあるコメントをとにかく書き出す
・コメントを読んで改善が必要なものを見つける
・改善する

5.5 まとめ
コメントの目的コードの意図を読み手に理解してもらう
コメントすべきではないこと；
　・コードからすぐに抽出できること
　・ひどいコード（たとえばひどい名前の関数）を補う「補助的」なコメント
　　コメントを書くのではなくコードを修正する

記録するべき自分の考え；
　・なぜコードが他のやり方ではなくこうなっているのか
　・コードの欠陥をTODOやXXXなどの記法を使って示す
　・定数の値にまつわる背景

読み手の立場になって考える；
　・コードを読んだ人が「え？」と思うところを予想してコメントを付ける
　・平均的な読み手が驚くような動作は文書化しておく
　・ファイルやクラスには「全体像」のコメントを書く
　・読み手が細部にとらわれないように、コードブロックにコメントを付けて概要をまとめる


