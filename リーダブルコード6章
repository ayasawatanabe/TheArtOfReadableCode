リーダブルコード
第六章
コメントは正確に簡潔に書く

ダメな例　C++の型定義につけたコメント
// intはCategoryType
// painの最初のfloatはscore
//２つ目はweight
Type hash_map<int, pain<float, float > ScoreMap;

// CategoryType -> (score, weight)
Type hash_map<int, pain<float, float > ScoreMap;

6.2曖昧な代名詞を避ける
「それ」「これ」は何を指しているかわかりずらいので使用しない。

// データをキャッシュに入れる。ただし先に「その」サイズをチェックする
// データをキャッシュに入れる。ただし先に「データの」サイズをチェクする
// データが十分に小さければ、それをキャッシュに入れる

6.3歯切れの悪い文章を磨く
コメントを正確にする事と簡潔にすることは両立する場合が多い

// これまでにクロールしたURLかどうかによって優先度を変える
// これまでにクロールしていないURLの優先度を高くする

単純。短い。直感的

6.4関数の動作を正確に記述する
// このファイルに含まれる行数を返す
Int CountLines( string filename) {…}

これはあまり正確なコメントでは無い
「行」には様々な意味がある
コーナーケース
・””（空のファイル）は0行なのか1行なのか。
・”hello”はは0行なのか1行なのか。
・”hello/n”は1行なのか2行なのか。
・”hello/n/r” worldは1行なのか2行なのか。
・”hello/n/r cruel/n world/r”は2行なのか3行なのか4行なのか

最も簡単な実装は
// このファイルに含まれる改行文字(/n)を数える
Int CountLines(string filename) {…}

・改行文字がないときは0行
・キャッシュリターン(/r)は無視される

6.5入出力のコーナーケースに実例を使う

文字列の一部を除去する関数
// ‘src’の先頭や末尾にある’chars’を除去する
String Strip(String src, String chars) {…}

・charsは除去する文字列なのか順序のない文字集合なのか？
・srcの末尾に複数のcharsがあったらどうなるのか？

適切な実例
// 実例　Strip(”aaa/a/ba” , ab) は　/a/を返す
・順序のない文字列集合
・すべて削除する

6.6コードの意図を書く
// listを逆順にイテレートする
↓
// 値段の高い順に表示する

6.7「名前付き引数」コメント
関数呼び出し
connect(10, false);

Pythonなど
def Connect( timeout = 10, use_encryption = False);
CやJavaではインラインコメント
def Connect(int timeout, use_encryption = False)
Def Connect( /* timeout_ms = */ 10, /* use_encryption = */ false);
値の前に置くのが大切

// これはやってはいけない
Connect(…, false /* use_encryption */);

// これもやってはいけない
Connect(…, false /* = use_encryption */);
これではfalseが暗号化するのか暗号化しないのかよく分からない

6.8情報密度の高い言葉を使う
// このクラスには大量のメンバがある、同じ情報はデータベースにも保管されている。
ただし速度の面からここにも保管しておく。このクラスを読み込むときには、
メンバーが存在ているかどうかを先に確認するもし存在していれば、そのまま返す。
存在しなければデータベースから読み込んで、次回のためにデータをフィールドに保管する
↓
// このクラスの役割は、データベースのキャッシュ層である

・キャッシュ層
・ヒューリスティック
・ブルートフォース
・ナイーブソリューション

6.9まとめ
・複数のものを指す可能性がある「それ」や「これ」などの代名詞を避ける
・関数の動作はできるだけ正確に説明する
・コメントに含める入出力の実例を慎重に選ぶ
・コードの意図は詳細レベルではなく、高レベルで記述する
・よく分からない引数にはインラインコメントを使う（例：Function(/* arg= */ 19);
・多くの意味が詰め込まれた言葉や表現を使ってコメントを簡潔に保つ
