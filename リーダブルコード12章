リーダブルコード
第十二章
コードに思いを込める
誰かに複雑な考えを伝える時には「簡単な言葉」で説明することが大切
1.コードの動作を簡単な言葉で同僚にもわかるように説明する
2.その説明の中で使っているキーワードやフレーズに注目する
3.その説明に合わせてコードを書く

■12.1ロジックを明確に説明する
// ユーザにページを観覧する権限があるか確認
変更前
$is_admin = is_admin_request();
is ($document) {
  if (! is_admin && ($document[‘username’] != $_SESSION[‘username’])){
    return not_authorized();
  }
} eles {
  if (! $is_admin){
    return not_authorized();
  }
}
// 引き続きページのレンダリング
・ロジックがたくさんある
権限があるのは以下の2つ
・管理者
・文書の所有者(文章がある場合)
その他は権限がない

変更後
if (is_admin_request()){
  // 権限あり
} else if ($document && ($document[‘username’] ! = $_SESSION[‘username’])){
 // 権限あり
} else {
  return not_authorized();
}
// 引き続きページのレンダリング
#  このコードは少し変だ。って書いてあるけどそのままの意味で読み取っていいのかな不完全な気がする

・コードが小さい
・ロジックが単純
・否定形を使わない
　早く返すと相反しているような？

■12.2ライブラリを知る
// ヒントを表示するウェブサイト
// ヒント：過去のクリエを見るにはログインしてください[他のヒントを見る]
// ヒントは10個ほどあってHTMLに隠してある

<div id=“tip-1” class=“tip”>ヒント1</div>
<div id=“tip-2” class=“tip”>ヒント1</div>
// ユーザがページを訪問するとdivの一つがランダムに表示される
// 残りは隠れたまま
// 他のヒントを見るをクリックすると他のヒントが表示される
jQuery JavaScript
変更前
var show_next_tip = function() {
  var num_tips = $(‘.tip’).size(); // .tipをもつdivを数える
  var shown_tip = $(‘tip:visible’); // 表示されている要素を探す

  var show_tip_num = Number(shown_tip.attr(‘id’).slice(4)); // 表示されているtipの番号を取得
  if (show_tip_num === num_tips){ // 最初だったら
    $(‘#tip-1’).show();
  } else {
    $(‘#tip-’ + (show_tip_num + 1)).show(); // 次のtipを表示
  }
  show_tip.hide(); // 上で指定したtip divを表示
}

変更後
今見えているヒントを見つけ出す
次のヒントを見つけて表示する
ヒントがなくなったら、最初のヒントに戻る

var show_next_tip = function () {
  var cur_tip = $(‘.tip:visible’).hide(); // 今見えているヒントを隠す
  var next_tip = cur_tip.next(‘.tip’); // 次のヒントを見つける
  if (next_tip.size() === 0) { // ヒントがなくなったら
    next_tip = $(‘tip:first’);  // 最初のヒントに戻る
  }
  next_tip.show(); // 新しいヒントを表示する
}
コードが短くなった
数値を直接操作する必要がなくなった
人間の思考に近い書き方ができている
.next()メソッドが役になった
ライブラリを知ることは簡潔なコードを書くためには欠かせない

■12.3
長いのでskip
コードを書く
処理を言語化する
複雑になっている部分を下位問題として抽出する

抽出した部分に対して言語化する
言語化したロジックに対してコードを書いてみる
簡潔に説明する ->  簡潔なコードを書く

AdvanceToMatchingTime()
現在の行のtimeをみる、一致していれば終了する
一致していなければ「遅れている」行を進める
行が一致するまで(あるいはイテレーションのいずれかが終了するまで)これを繰り返す
def AdvanceToMatchingTime(row_iter1, row_iter2, row_iter3):
  while row_iter1 and row_iter2 and row_iter3:
    t1 = row_iter1.time
    t2 = row_iter2.time
    t3 = row_iter3.time
   
    if t1 == t2 == t3:  // 時間が一致
      return t1
    
    tmax = max(t1,t2,t3) // 3つの値中最大値

　 // いずれかの行が遅れているのであればその行を進める
    if t1 < max: row_oter1.NextRow()
    if t2 < max: row_oter2.NextRow()
    if t3 < max: row_oter3.NextRow()
  return None # 一致する行が見つからない

■12.4まとめ
プログラムを簡単な言葉で説明する
説明することでコードがより自然になっていく
説明で使っている単語やフレーズをよく見れば、分割する下位問題がどこにあるか分かる
「簡単な言葉で説明する」手法
ラバーダッキング
問題を声に出して説明する
デバックにも役立つ
問題や設計をうまく言葉で説明できないのであれば、何かを見落としているか詳細が明確になっていない
プログラムあるいは自分の考えを言葉にすることで明確になる

